import socket

class Scanner:
    def __init__(self, ip):
        self.ip = ip
        self.open_ports = []

    def __repr__(self):
        return 'Scanner: {}'.format(self.ip)

    def add_port(self, port):
        self.open_ports.append(port)

    def scan(self, lowerport, upperport):
        for port in range(lowerport, upperport + 1):
            if self.is_open(port):
                self.add_port(port)

    def is_open(self, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(0.3)
        try:
            result = s.connect_ex((self.ip, port))
            if result == 0:
                return True
            else:
                return False
        except socket.error:
            return False
        finally:
            s.close()

class Grabber:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.settimeout(0.3)
        try:
            self.socket.connect((self.ip, self.port))
        except socket.error:
            self.socket.close()

    def read(self, length=1024):
        try:
            return self.socket.recv(length)
        except socket.error:
            return b''

    def close(self):
        self.socket.close()

def main():
    ip = 'localhost'
    print("\nConnection established")
    print("\nScan running...\n")
    scanner = Scanner(ip)
    scanner.scan(1, 65000)

    if len(scanner.open_ports) == 0:
        print("No open ports found")
    else:
        print(f"{len(scanner.open_ports)} open ports has been detected:\n")
        for port in scanner.open_ports:
            try:
                grabber = Grabber(ip, port)
                response = grabber.read()
                if response:
                    print(f"{port} : {response.decode().strip()}\n")
                else:
                    print(f"{port} : No response\n")
                grabber.close()
            except socket.error:
                print(f"{port} : Unable to connect\n")

    print("Scan finished")

if __name__ == '__main__':
    main()
